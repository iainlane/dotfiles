---
- name: Set up facts
  hosts: all
  gather_facts: true
  run_once: true
  tags: ["always"]
  tasks:
    - name: Set initial facts
      ansible.builtin.set_fact:
        os_family: "{{ ansible_distribution | lower }}"
        os_type: "{{ ansible_system | lower }}"

    - name: Map `ubuntu` to `debian`
      ansible.builtin.set_fact:
        os_family: "debian"
      when: os_family == "ubuntu"

    - name: Map `macosx` to `macos`
      ansible.builtin.set_fact:
        os_family: "macos"
      when: os_family == "macosx"

    - name: Add host to OS group
      ansible.builtin.add_host:
        name: "{{ inventory_hostname }}"
        groups: "{{ os_type }}"

    - name: Add host to home group if not a work machine
      ansible.builtin.add_host:
        name: "{{ inventory_hostname }}"
        groups: home
      when: "'work' not in group_names"

- name: Debug
  hosts: all
  tags: ["debug"]
  tasks:
    - name: Print available facts
      ansible.builtin.debug:
        var: ansible_facts

    - name: Print groups for verification
      ansible.builtin.debug:
        msg: "{{ group_names }}"

- name: Set up local workstation (debian)
  hosts: linux
  tags: ["debian", "system"]
  roles:
    - role: apt
      tags: ["apt"]
    - role: google-chrome
      tags: ["browser"]
    - role: snap
      tags: ["snap"]
    - role: pipewire
      tags: ["audio"]

- name: Set up local workstation (macos)
  hosts: darwin
  tags: ["macos", "system"]
  roles:
    - role: brew
      tags: ["brew"]

- name: Set up local workstation (all)
  hosts: all
  tags: ["common"]
  roles:
    - role: user
      tags: ["user"]
    - role: fonts
      tags: ["fonts"]
    - role: git
      tags: ["git"]
    - role: go
      tags: ["go"]
    - role: cargo
      tags: ["cargo"]

- name: Install work things
  hosts: work
  tags: ["work"]
  roles:
    - role: cloud_sdks
      tags: ["cloud"]
    - role: work-packages
      tags: ["packages"]

- name: Install home things
  hosts: home
  tags: ["home"]
  roles:
    - role: terraform
      tags: ["terraform"]
