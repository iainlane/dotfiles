name: Build and Push Docker Image

on:
  push:
    branches:
      - main
    paths:
      - "roles/cargo/tasks/main.yml"
      - "Dockerfiles/Dockerfile.rust"
      - ".github/workflows/build-push-image.yml"

env:
  IMAGE_NAME: dotfiles-rust-tools
  REGISTRY: ghcr.io/${{ github.repository_owner }}

jobs:
  get-packages:
    runs-on: ubuntu-latest
    outputs:
      packages: ${{ steps.yq.outputs.packages }}
    steps:
      - name: Checkout code
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0

      - name: Get Rust binaries to build
        id: yq
        run: |
          BASE_PACKAGES=$(yq -r '.cargo_packages_base | tojson(0)' roles/cargo/defaults/main.yml)
          DESKTOP_PACKAGES=$(yq -r '.cargo_packages_desktop | tojson(0)' group_vars/desktop)
          echo "packages=$(echo "$BASE_PACKAGES $DESKTOP_PACKAGES" | jq -s 'add | unique')" >> "${GITHUB_OUTPUT}"

  build:
    needs: get-packages
    runs-on: ubuntu-latest
    strategy:
      matrix:
        package: ${{ fromJson(needs.get-packages.outputs.packages) }}
        arch: [amd64, arm64]
        include:
          - arch: arm64
            target: aarch64-unknown-linux-gnu
            gcc: aarch64-linux-gnu-gcc
          - arch: amd64
            target: x86_64-unknown-linux-gnu
            gcc: x86_64-linux-gnu-gcc
    steps:
      - name: Checkout code
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0

      - name: Set up Rust toolchain
        uses: actions-rust-lang/setup-rust-toolchain@1780873c7b576612439a134613cc4cc74ce5538c # v.1.15.2
        with:
          toolchain: stable

      - name: Set up cross-compilation
        run: |
          sudo apt-get update
          sudo apt-get -y install crossbuild-essential-${{ matrix.arch }}

          TARGET=$(echo "${{ matrix.target }}" | tr '-' '_' | tr '[:lower:]' '[:upper:]')

          rustup target add "${{ matrix.target }}"
          echo "CARGO_TARGET_${TARGET}_LINKER=${{ matrix.gcc }}" >> "${GITHUB_ENV}"

      - name: Setup cache of ~/.cargo
        uses: actions/cache@0057852bfaa89a56745cba8c7296529d2fc39830 # v4.3.0
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/
            ~/.cargo/registry/
            ~/.cargo/git/db/
          key: cargo-${{ runner.os }}-${{ matrix.arch }}-${{ matrix.package }}-${{ github.head_ref }}-${{ github.sha }}
          restore-keys: |
            cargo-${{ runner.os }}-${{ matrix.arch }}-${{ matrix.package }}-${{ github.head_ref }}-${{ github.sha }}
            cargo-${{ runner.os }}-${{ matrix.arch }}-${{ matrix.package }}-${{ github.head_ref }}
            cargo-${{ runner.os }}-${{ matrix.arch }}-${{ matrix.package }}
            cargo-${{ runner.os }}-${{ matrix.arch }}

      - name: Build Rust binaries
        shell: bash
        run: |
          mkdir cargobin

          cargo install --target=${{ matrix.target }} --root=cargobin ${{ matrix.package }}

      - name: Push binaries as artifacts
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: binary-${{ github.run_id }}-${{ matrix.arch }}-${{ matrix.package }}
          path: cargobin

  push-manifest:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0

      - name: Download binaries (amd64)
        uses: actions/download-artifact@634f93cb2916e3fdff6788551b99b062d0335ce0 # v5.0.0
        with:
          pattern: binary-${{ github.run_id }}-amd64-*
          path: cargobins/amd64
          merge-multiple: true

      - name: Download binaries (arm64)
        uses: actions/download-artifact@634f93cb2916e3fdff6788551b99b062d0335ce0 # v5.0.0
        with:
          pattern: binary-${{ github.run_id }}-arm64-*
          path: cargobins/arm64
          merge-multiple: true

      - name: Check bins
        run: |
          ls -laR cargobins

      - name: Setup buildx
        uses: docker/setup-buildx-action@e468171a9de216ec08956ac3ada2f0791b6bd435 # v3.11.1

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@c1e51972afc2121e065aed6d45c65596fe445f3f # v5.8.0
        with:
          images: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=sha,prefix=git-,format=long

      - name: Login to GitHub Container Registry
        uses: docker/login-action@184bdaa0721073962dff0199f1fb9940f07167d1 # v3.5.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@263435318d21b8e681c14492fe198d362a7d2c83 # v6.18.0
        with:
          context: .
          file: ./Dockerfiles/Dockerfile.rust
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            ${{ steps.meta.outputs.tags }}

  cleanup:
    needs: [build, push-manifest]
    runs-on: ubuntu-latest
    if: always() && needs.build.result == 'success'
    steps:
      - name: Remove artifacts
        uses: GeekyEggo/delete-artifact@f275313e70c08f6120db482d7a6b98377786765b # v5.1.0
        with:
          name: |
            binary-${{ github.run_id }}-*
