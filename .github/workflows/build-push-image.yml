name: Build and Push Docker Image

on:
  push:
    branches:
      - main
    paths:
      - "roles/cargo/tasks/main.yml"
      - "Dockerfiles/Dockerfile.rust"
      - ".github/workflows/build-push-image.yml"

env:
  IMAGE_NAME: dotfiles-rust-tools
  REGISTRY: ghcr.io/${{ github.repository_owner }}

jobs:
  get-packages:
    runs-on: ubuntu-latest
    outputs:
      packages: ${{ steps.yq.outputs.packages }}
    steps:
      - name: Checkout code
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7

      - name: Get Rust binaries to build
        id: yq
        run: |
          echo "packages=$(yq -r '.[] | select(.name == "Install Cargo packages") | .loop | tojson(0)' roles/cargo/tasks/main.yml)" >> "${GITHUB_OUTPUT}"

  build:
    needs: get-packages
    runs-on: ubuntu-latest
    strategy:
      matrix:
        package: ${{ fromJson(needs.get-packages.outputs.packages) }}
        arch: [amd64, arm64]
        include:
          - arch: arm64
            target: aarch64-unknown-linux-gnu
            gcc: aarch64-linux-gnu-gcc
          - arch: amd64
            target: x86_64-unknown-linux-gnu
            gcc: x86_64-linux-gnu-gcc
    steps:
      - name: Checkout code
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7

      - name: Set up Rust toolchain
        uses: actions-rust-lang/setup-rust-toolchain@1fbea72663f6d4c03efaab13560c8a24cfd2a7cc # v.1.9.0
        with:
          toolchain: stable

      - name: Set up cross-compilation
        run: |
          sudo apt-get update
          sudo apt-get -y install crossbuild-essential-${{ matrix.arch }}

          TARGET=$(echo "${{ matrix.target }}" | tr '-' '_' | tr '[:lower:]' '[:upper:]')

          rustup target add "${{ matrix.target }}"
          echo "CARGO_TARGET_${TARGET}_LINKER=${{ matrix.gcc }}" >> "${GITHUB_ENV}"

      - name: Setup cache of ~/.cargo
        uses: actions/cache@0c45773b623bea8c8e75f6c82b208c3cf94ea4f9 # v4.0.2
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/
            ~/.cargo/registry/
            ~/.cargo/git/db/
          key: cargo-${{ runner.os }}-${{ matrix.arch }}-${{ matrix.package }}-${{ github.head_ref }}-${{ github.sha }}
          restore-keys: |
            cargo-${{ runner.os }}-${{ matrix.arch }}-${{ matrix.package }}-${{ github.head_ref }}-${{ github.sha }}
            cargo-${{ runner.os }}-${{ matrix.arch }}-${{ matrix.package }}-${{ github.head_ref }}
            cargo-${{ runner.os }}-${{ matrix.arch }}-${{ matrix.package }}
            cargo-${{ runner.os }}-${{ matrix.arch }}

      - name: Build Rust binaries
        shell: bash
        run: |
          mkdir cargobin

          cargo install --target=${{ matrix.target }} --root=cargobin ${{ matrix.package }}

      - name: Push binaries as artifacts
        uses: actions/upload-artifact@0b2256b8c012f0828dc542b3febcab082c67f72b # v4.3.4
        with:
          name: binary-${{ github.run_id }}-${{ matrix.arch }}-${{ matrix.package }}
          path: cargobin

  push-manifest:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7

      - name: Download binaries (amd64)
        uses: actions/download-artifact@fa0a91b85d4f404e444e00e005971372dc801d16 # v4.1.8
        with:
          pattern: binary-${{ github.run_id }}-amd64-*
          path: cargobins/amd64
          merge-multiple: true

      - name: Download binaries (arm64)
        uses: actions/download-artifact@fa0a91b85d4f404e444e00e005971372dc801d16 # v4.1.8
        with:
          pattern: binary-${{ github.run_id }}-arm64-*
          path: cargobins/arm64
          merge-multiple: true

      - name: Check bins
        run: |
          ls -laR cargobins

      - name: Setup buildx
        uses: docker/setup-buildx-action@aa33708b10e362ff993539393ff100fa93ed6a27 # v3.5.0

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@8e5442c4ef9f78752691e2d8f8d19755c6f78e81 # v5.5.1
        with:
          images: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=sha,prefix=git-,format=long

      - name: Login to GitHub Container Registry
        uses: docker/login-action@9780b0c442fbb1117ed29e0efdff1e18412f7567 # v3.3.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@5176d81f87c23d6fc96624dfdbcd9f3830bbe445 # v6.5.0
        with:
          context: .
          file: ./Dockerfiles/Dockerfile.rust
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            ${{ steps.meta.outputs.tags }}

  cleanup:
    needs: [build, push-manifest]
    runs-on: ubuntu-latest
    if: always() && needs.build.result == 'success'
    steps:
      - name: Remove artifacts
        uses: GeekyEggo/delete-artifact@24928e75e6e6590170563b8ddae9fac674508aa1 # v5.0.0
        with:
          name: |
            binary-${{ github.run_id }}-*
